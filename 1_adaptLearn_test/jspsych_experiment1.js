
//1. initialize jsPsych and saving result to a variable called jsPsych
// add displayData via the on_finish callback function: which is useful for debugging; it will show the raw data collected at the end of the exp
var jsPsych = initJsPsych({
  on_finish: function(){ 
    saveData(jsPsych.data.get()); 
  }
});

//2. all exp are defined by a timeline; will contain a set of trials we want to run in the experiment
var timeline = [];

//3. preload images
var preload = {
  type: jsPsychPreload,
  images: ['img/blue.png', 'img/orange.png']
};
timeline.push(preload);

//4. welcome page & creating a trial that uses html-keyboard-response plugin, which contains a simple string to show to the subject
// trial object must have a type parameter that tells jsPsych which plugin to use; value of type is similar to plugin name, but starts with jsPsych 
var welcome = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: "Welcome to the experiment. Press any key to begin."
};

//5. push the welcome trial to the timeline, which adds it to the end of the array
timeline.push(welcome);

//6. Instructions: show instructions by creating a new html-keyboard-response trial and using HTML formatting to control the instructions display
//adding a two second gap after the trial using post_trial_gap parameter
var instructions = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: `
    <p>In this experiment, a circle will appear in the center 
    of the screen.</p><p>If the circle is <strong>blue</strong>, 
    press the letter F on the keyboard as fast as you can.</p>
    <p>If the circle is <strong>orange</strong>, press the letter J 
    as fast as you can.</p>
    <div style='width: 700px;'>
    <div style='float: left;'><img src='img/blue.png'></img>
    <p class='small'><strong>Press the F key</strong></p></div>
    <div style='float: right;'><img src='img/orange.png'></img>
    <p class='small'><strong>Press the J key</strong></p></div>
    </div>
    <p>Press any key to begin.</p>
  `,
  post_trial_gap: 2000
};
timeline.push(instructions);


 //7. define test trials: showing each image once; the path to the image file is set as the stimulus parameter
 // also set option for which keys the subject is allowed to use
 var blue_trial = {
  type: jsPsychImageKeyboardResponse,
  stimulus: 'img/blue.png',
  choices: ['f', 'j']
};

var orange_trial = {
  type: jsPsychImageKeyboardResponse,
  stimulus: 'img/orange.png',
  choices: ['f', 'j']
};
timeline.push(blue_trial, orange_trial);

//8. Instructions Exp
var instructions_Exp = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: `
    <p>You have accomplished the test trials!</p>
    <p>The experiment is going to start now.</p> d
    <p>Press any key to begin.</p>
  `,
  post_trial_gap: 2000
};
timeline.push(instructions_Exp);

//9. Experiment: Timeline variables: one way, defining more variables (see 7) and push those to the timeline; another way shown now
// timeline variables allow us to define the procedure for showing the stimulus once, and then repeatedly use it with different variables

// create variable with test_stimuli
// tag info which response is cor 
var test_stimuli = [
  { stimulus: "img/blue.png",  correct_response: 'f'},
  { stimulus: "img/orange.png",  correct_response: 'j'}
];

// add fix cross with no button press needed
// to randomly change the presentation duration of the fix cross specify the trial_duaration parameter as a function
// jsPsych will execute the function every time the trial runs and the function returns different results probabilistically 
// the return value is an array of length 1, so we add [0] selection at the end to get the value of the array
// tag additional information for these trials!
// add task type 'fixation' (for filtering out e.g. differentiating from fix cross)
var fixation = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: '<div style="font-size:60px;">+</div>',
  choices: "NO_KEYS",
  trial_duration: function(){
    return jsPsych.randomization.sampleWithoutReplacement([250, 500, 750, 1000, 1250, 1500, 1750, 2000], 1)[0];
  },
  data: {
    task: 'fixation'
  }
};

// create test variable amd use the function jsPsych.timelineVariable() to indicate that we want jsPsych to substitute the value of the parameter in from the timeline variables
// tag additional information for these trials!
// add task type 'response' (for filtering out e.g. differentiating from fix cross)
// add correct response from the timelineVariable above
// add on_finish to directly analyze the data: function will receive an object containing the data generated by the trial
// .. this object can be manipulated inside the function, and any change made to the object will be stored in jsPsych's internal representation of the data
// .. here we will add whether the subject responded correctly and add a new correct property to the data object (response and correct_response compared via plugin compareKeys)
var test = {
  type: jsPsychImageKeyboardResponse,
  stimulus: jsPsych.timelineVariable('stimulus'),
  choices: ['f', 'j'],
  data: {
    task: 'response',
    correct_response: jsPsych.timelineVariable('correct_response')
  },
  on_finish: function(data){
    data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);
  }
};

// to link the variables we declared in test_stimuli to test, we need to create a new timeline and set the timeline_variables property
// use randomize_order to randomize the order ;)
// use repetitions to repeat the trials
var test_procedure = {
  timeline: [fixation, test],
  timeline_variables: test_stimuli,
  randomize_order: true,
  repetitions: 5
};

// test_procedure can now be pushed to the timeline
timeline.push(test_procedure);

//10. Displaying a text by using inbuild functions calculating the subjects performance by using the htmlKeyoardResponse plugin
// because the text that we want to display changes based on the performance, we need to use a function for the stimulus parameter and return the desired text
// to create the variable trials we use jsPsych.data.get() which returns a jsPsych data collection containing all of the data
// we can use .filter() to select only the trials where task is 'response' (only the circle trials)
// .. and to .filter() out the correct trials 
// .. to calculate the accuracy and average RT we can use the .count() method to determine how many trials were correct and how many where total 
// we can use Math.round() to avoid extra digits after the decimal
var debrief_block = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: function() {

    var trials = jsPsych.data.get().filter({task: 'response'});
    var correct_trials = trials.filter({correct: true});
    var accuracy = Math.round(correct_trials.count() / trials.count() * 100);
    var rt = Math.round(correct_trials.select('rt').mean());

    return `<p>You responded correctly on ${accuracy}% of the trials.</p>
      <p>Your average response time was ${rt}ms.</p>
      <p>Press any key to complete the experiment. Thank you!</p>`;

  }
};
timeline.push(debrief_block);

//11. start the experiment 
jsPsych.run(timeline);

//12. SAVE Data and REDIRECT after saving to Exp Part 2
function saveData(data) {
  
  // separate json and csv files to store json to DB and csv to disk
  let jsonfile = data.json();
  let csvfile = data.filter({task: "response"}).csv();

  // open request for sending csv file to disk
  let xhr = new XMLHttpRequest();
  xhr.open('POST', 'saveExp1.php');
  xhr.setRequestHeader('Content-Type', 'application/json');

  console.log('I want to store this data:');
  console.log(csvfile);
  
    // cross check echos in php script in console
    xhr.onload=function(){
      console.log(this.responseText);
    }

  // open request to send json to DB
  xhr.onload = function() {
    let xhr = new XMLHttpRequest();
    xhr.open('POST', 'saveExp1DB.php'); 
    xhr.setRequestHeader('Content-Type', 'application/json');
  
    xhr.onload = function() {
      if(xhr.status == 200){
        console.log(xhr.responseText);
        console.log(this.responseText);
      }
    };
    xhr.send(jsonfile);
  };
  xhr.send(JSON.stringify(csvfile));

  // Redirect to questionnaires and EXP PART 2
    xhr.onload = function(){
    window.location.assign('exp_part2.html');
  };

}
